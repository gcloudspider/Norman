指针:
	*p =200;
	根据地址找到值，并修改它

解引用:
	指向指针间接操作
	printf("m=%d",*p);

指针变量是一种可以保存其他类型变量地址的变量 
指针的本质就是地址，只是它具备某种类型的访问权限


int m = 1000;
*p = &m
sizeof(p);
sizeof(*p)  == sizeof(m)	(相同)

void *pv = &m;
*pv = 200;		(void* 的指针不可以解引用,因为*pv=&m不知道m类型,*pv只知道为void类型)
总结:
	1.任何一个指针变量的大小都是4个字节(32位)，不会根据类型和值的大小改变
	2.一个指针的解引用大小，由它指向的变量类型来决定。


*(char *) &m
	
*(char *) pm
	
*((char*) pm+1) :	指针步长计算

二级指指是指可以保存一级指针地址变量的指针变量



指针与数组:
	1.指针变量总是被看作一个数组的起始地址，所以其可以和一个数组名等价替换
	2.指针变量 可以改，增加了Bug产生机会,所以在使用指针时一定要小心!
	3.指针访问是否越界(容易出现的问题)!
指针与字符串:
	1.

指针数组:
	1.指针数组中每个元素是一个指针,sizeof为指针个数×4个字节
		char* ps[0] = "123";
		char* ps[1] = "456";
		char* ps[2] = "789";

		char* ps[3] = {
			"123","456",
			"789"
		} (效率更高,不需要分配内存)	

		存放在代码段!只读
数组指针:
	
